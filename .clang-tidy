Checks: >
  -*,
  bugprone-*,
  google-*,
  misc-*,
  performance-*,
  portability-*,
  readability-*,
  -google-readability-braces-around-statements,
  google-readability-namespace-comments,
  -google-runtime-references,
  -readability-else-after-return,
  -readability-isolate-declaration,
  -readability-convert-member-functions-to-static,
  -misc-non-private-member-variables-in-classes,
  modernize-avoid-bind
  modernize-deprecated-headers
  modernize-loop-convert
  modernize-make-shared
  modernize-make-unique
  modernize-pass-by-value
  modernize-raw-string-literal
  modernize-redundant-void-arg
  modernize-replace-auto-ptr
  modernize-shrink-to-fit
  modernize-use-auto
  modernize-use-bool-literals
  modernize-use-default
  modernize-use-emplace
  modernize-use-nullptr
  modernize-use-override
  modernize-avoid-bind,
  modernize-avoid-c-arrays,
  modernize-concat-nested-namespaces,
  modernize-deprecated-headers,
  modernize-deprecated-ios-base-aliases,
  modernize-loop-convert,
  modernize-make-shared,
  modernize-make-unique,
  modernize-pass-by-value,
  modernize-raw-string-literal,
  modernize-redundant-void-arg,
  modernize-replace-auto-ptr,
  modernize-replace-disallow-copy-and-assign-macro,
  modernize-replace-random-shuffle,
  modernize-return-braced-init-list,
  modernize-shrink-to-fit,
  modernize-unary-static-assert,
  modernize-use-bool-literals,
  modernize-use-default-member-init,
  modernize-use-emplace,
  modernize-use-equals-default,
  modernize-use-equals-delete,
  modernize-use-nodiscard,
  modernize-use-noexcept,
  modernize-use-transparent-functors,
  modernize-use-uncaught-exceptions,
  modernize-use-using,
  -performance-move-const-arg,
  -readability-braces-around-statements,
  -readability-magic-numbers,
  -readability-named-parameter,
  -readability-redundant-declaration
# Turn all the warnings from the checks above into errors.
# WarningsAsErrors: "*"

HeaderFilterRegex: "(google/cloud/|generator/).*\\.h$"

CheckOptions:
  - { key: readability-identifier-naming.NamespaceCase, value: lower_case }
  - { key: readability-identifier-naming.ClassCase, value: CamelCase }
  - { key: readability-identifier-naming.StructCase, value: CamelCase }
  - { key: readability-identifier-naming.TemplateParameterCase, value: CamelCase }
  - { key: readability-identifier-naming.FunctionCase, value: camelBack }
  - { key: readability-identifier-naming.VariableCase, value: lower_case }
  - { key: readability-identifier-naming.ClassMemberCase, value: lower_case }
  - { key: readability-identifier-naming.ClassMethodCase, value: camelBack }
  - { key: readability-identifier-naming.ClassMemberPrefix, value: m_ }
  - { key: readability-identifier-naming.EnumConstantCase, value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantPrefix, value: k }
  - { key: readability-identifier-naming.ConstexprVariableCase, value: CamelCase }
  - { key: readability-identifier-naming.ConstexprVariablePrefix, value: k }
  - { key: readability-identifier-naming.GlobalConstantCase, value: CamelCase }
  - { key: readability-identifier-naming.GlobalConstantPrefix, value: k }
  - { key: readability-identifier-naming.MemberConstantCase, value: CamelCase }
  - { key: readability-identifier-naming.PrivateMemberCase, value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberPrefix, value: m_}
  - { key: readability-identifier-naming.MemberConstantPrefix, value: k }